import java.util.*;
 
class Solution {
    public int solution(int N, int number) {
        if (N == number) {
            return 1;
        }
 
        // 가능한 숫자들의 집합을 담을 리스트 초기화
        List<Set<Integer>> dp = new ArrayList<>();
        for (int i = 0; i <= 8; i++) {
            dp.add(new HashSet<>());
        }
 
        // 숫자 N을 이용하여 만들 수 있는 숫자들 초기화
        dp.get(1).add(N);
 
        // 숫자를 더하거나 빼는 연산을 적용하여 가능한 숫자들 생성
        for (int i = 2; i <= 8; i++) {
            // 현재 i에 해당하는 숫자를 만들기 위해 N을 사용하는 경우의 수 고려
 
            // N을 i번 사용하여 숫자 생성
            // StringBuilder를 사용하여 N을 i번 반복하여 숫자 생성
            StringBuilder sb = new StringBuilder().append(N);
            for (int j = 1; j < i; j++) {
                sb.append(N);
            }
            dp.get(i).add(Integer.parseInt(sb.toString()));
 
       
            // dp 리스트로 가능한 숫자 구하기
            // 연산 결과를 dp[i]에 추가합니다.
            for (int j = 1; j < i; j++) {
                int k = i - j;
                for (int num1 : dp.get(j)) {
                    for (int num2 : dp.get(k)) {
                        dp.get(i).add(num1 + num2);
                        dp.get(i).add(num1 - num2);
                        dp.get(i).add(num1 * num2);
                        if (num2 != 0) {
                            dp.get(i).add(num1 / num2);
                        }
                    }
                }
            }
 
            // number가 포함되어 있다면 i 반환
            if (dp.get(i).contains(number)) {
                return i;
            }
        }
 
        // number를 표현할 수 없는 경우
        return -1;
    }
}
